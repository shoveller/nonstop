# GitHub 시크릿 자동 업로드 스크립트
# 다중 .env 파일의 환경변수를 적절한 GitHub 시크릿 레벨로 업로드합니다.
#
# 주요 기능:
# - .env 파일들을 자동으로 GitHub 시크릿/변수로 업로드
# - CI 환경에서는 실행하지 않음
# - GitHub CLI 인증 필요, 시스템 변수 및 빈 값 자동 제외
# - 환경이 없으면 자동 생성
#
# 지원하는 파일 및 매핑:
# - .env                     → Repository secrets (예: API_KEY=secret123)
# - .env.var                 → Repository variables (예: BASE_URL=https://api.com)
# - .env.{environment}       → Environment secrets (예: .env.staging → staging 환경)
# - .env.{environment}.var   → Environment variables (예: .env.staging.var → staging 환경)
# - .env.org                 → Organization secrets (예: SHARED_DB_URL=postgres://...)
# - .env.org.var             → Organization variables (예: PUBLIC_API_URL=https://api.com)
# - .env.dep                 → Dependabot secrets (예: SHARED_DB_URL=postgres://...)
# - .env.code                → Codespaces secrets (예: SHARED_DB_URL=postgres://...)
#
# 파일명 기반 저장 타입 결정:
# - .var 확장자 없음      → Secret으로 저장 (암호화, 로그 마스킹)
# - .var 확장자 있음      → Variable로 저장 (평문, 로그 노출)

set -e  # 오류 발생 시 스크립트 중단

# 색상 코드 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 로그 함수들
log_info() {
    printf "${BLUE}[INFO]${NC} %s\n" "$1"
}

log_success() {
    printf "${GREEN}[SUCCESS]${NC} %s\n" "$1"
}

log_warning() {
    printf "${YELLOW}[WARNING]${NC} %s\n" "$1"
}

log_error() {
    printf "${RED}[ERROR]${NC} %s\n" "$1"
}

# GitHub CLI 설치 확인
check_gh_cli() {
    if ! command -v gh &> /dev/null; then
        log_error "GitHub CLI (gh)가 설치되지 않았습니다."
        log_info "설치 방법: https://cli.github.com/"
        exit 1
    fi
}

# GitHub CLI 인증 확인
check_gh_auth() {
    if ! gh auth status &> /dev/null; then
        log_error "GitHub CLI 인증이 필요합니다."
        log_info "다음 명령어로 인증하세요: gh auth login"
        exit 1
    fi
}

# GitHub 계정 타입 확인 (Organization vs User)
check_account_type() {
    local owner="$1"

    # GitHub API로 계정 정보 조회
    local account_info=$(gh api "/users/$owner" 2>/dev/null)

    if [ $? -eq 0 ]; then
        local account_type=$(echo "$account_info" | grep '"type"' | sed 's/.*"type": *"\([^"]*\)".*/\1/')
        echo "$account_type"
    else
        log_warning "계정 타입을 확인할 수 없습니다: $owner"
        echo "Unknown"
    fi
}

# .env 파일들 찾기
find_env_files() {
    local env_files=""

    # .env 파일 패턴들을 순서대로 확인 (Variable 파일 포함)
    for pattern in ".env" ".env.*"; do
        for file in $pattern; do
            if [ -f "$file" ]; then
                env_files="$env_files $file"
            fi
        done
    done

    # 파일이 하나도 없으면 종료
    if [ -z "$env_files" ]; then
        log_warning ".env 파일을 찾을 수 없습니다. 시크릿 업로드를 건너뜁니다."
        exit 0
    fi

    # 찾은 파일들 로그 출력
    log_info "발견된 .env 파일들:$env_files"

    # 전역 변수에 저장
    ENV_FILES="$env_files"
}

# 현재 리포지토리 정보 가져오기
get_current_repo() {
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        local origin_url=$(git config --get remote.origin.url)
        # GitHub URL에서 owner/repo 추출 (POSIX 호환)
        case "$origin_url" in
            *github.com:*|*github.com/*)
                # SSH 또는 HTTPS 형식에서 owner/repo 추출
                REPO=$(echo "$origin_url" | sed -E 's|.*github\.com[:/]([^/]+/[^/]+).*|\1|' | sed 's|\.git$||')
                ORG=$(echo "$REPO" | cut -d/ -f1)
                ACCOUNT_TYPE=$(check_account_type "$ORG")

                log_info "현재 리포지토리 감지: $REPO"
                log_info "계정 정보: $ORG ($ACCOUNT_TYPE)"
                ;;
            *)
                log_error "GitHub 리포지토리가 아닙니다."
                exit 1
                ;;
        esac
    else
        log_error "Git 리포지토리가 아닙니다."
        exit 1
    fi
}

# 환경변수 이름 유효성 검사 (블랙리스트 방식)
validate_secret_name() {
    local name="$1"

    # 빈 문자열 체크
    if [ -z "$name" ]; then
        return 1
    fi

    # GitHub Actions 내부 변수들만 제외 (보안상 중요)
    case "$name" in
        GITHUB_TOKEN|GITHUB_ACTIONS|GITHUB_WORKFLOW|GITHUB_RUN_ID|GITHUB_RUN_NUMBER|GITHUB_REF|GITHUB_SHA|GITHUB_REPOSITORY|RUNNER_*)
            return 1  # GitHub Actions 시스템 변수들은 제외
            ;;
        *)
            return 0  # 나머지는 모두 허용
            ;;
    esac
}

# 환경 이름 예약어 검사
validate_env_name() {
    local env_name="$1"

    # 예약어 검사 (var, org, dep, code)
    case "$env_name" in
        var|org|dep|code)
            log_warning "환경 이름 '$env_name'은 예약어입니다"
            log_warning "예약어: var(변수), org(조직), dep(Dependabot), code(Codespaces)"
            return 1
            ;;
        *)
            return 0
            ;;
    esac
}

# 파일명에 따른 시크릿 타입 및 저장 타입 결정
determine_secret_type() {
    local filename="$1"

    case "$filename" in
        ".env.org.var")
            echo "org:variable"
            ;;
        ".env.org")
            echo "org:secret"
            ;;
        ".env.dep")
            echo "dependabot:secret"
            ;;
        ".env.code")
            echo "codespaces:secret"
            ;;
        ".env.var")
            echo "repo:variable"
            ;;
        ".env")
            echo "repo:secret"
            ;;
        ".env."*".var")
            # .env.{environment}.var 형태
            local env_name=$(echo "$filename" | sed 's/^\.env\.//' | sed 's/\.var$//')
            # 예약어 검사
            if ! validate_env_name "$env_name"; then
                log_warning "파일 $filename 건너뛰기: 예약어 사용"
                echo "invalid:reserved"
                return
            fi
            echo "env:$env_name:variable"
            ;;
        ".env."*)
            # .env.{environment} 형태
            local env_name=$(echo "$filename" | sed 's/^\.env\.//')
            # 예약어 검사
            if ! validate_env_name "$env_name"; then
                log_warning "파일 $filename 건너뛰기: 예약어 사용"
                echo "invalid:reserved"
                return
            fi
            echo "env:$env_name:secret"
            ;;
        *)
            log_warning "알 수 없는 .env 파일 형식: $filename"
            echo "repo:secret"  # 기본값으로 repository secret 사용
            ;;
    esac
}


# 환경 생성 함수
create_environment() {
    local env_name="$1"

    log_info "환경 '$env_name' 생성 중..."

    # 환경 생성 API 호출
    local response=$(gh api --method PUT "repos/$REPO/environments/$env_name" 2>/dev/null)

    if [ $? -eq 0 ]; then
        log_success "환경 '$env_name' 생성 완료"
        return 0
    else
        log_error "환경 '$env_name' 생성 실패"
        return 1
    fi
}

# 환경 존재 확인 함수
check_environment_exists() {
    local env_name="$1"

    # 환경 목록 조회
    local environments=$(gh api "repos/$REPO/environments" --jq '.[].name' 2>/dev/null)

    if [ $? -eq 0 ]; then
        echo "$environments" | grep -q "^$env_name$"
        return $?
    else
        return 1
    fi
}

# 타입별 환경변수 업로드 (Variable 또는 Secret)
upload_env_var() {
    local key="$1"
    local value="$2"
    local type_info="$3"

    # 타입 정보 파싱 (repo:secret, org:variable, env:staging:variable 등)
    local secret_type=$(echo "$type_info" | cut -d: -f1)
    local storage_type=$(echo "$type_info" | cut -d: -f2)

    case "$secret_type" in
        "repo")
            if [ "$storage_type" = "variable" ]; then
                log_info "GitHub CLI 명령어 실행: gh variable set $key --repo $REPO"
                gh variable set "$key" --body "$value" --repo "$REPO"
            else
                log_info "GitHub CLI 명령어 실행: gh secret set $key --repo $REPO"
                gh secret set "$key" --body "$value" --repo "$REPO"
            fi
            ;;
        "org")
            if [ "$ACCOUNT_TYPE" = "Organization" ]; then
                if [ "$storage_type" = "variable" ]; then
                    log_info "GitHub CLI 명령어 실행: gh variable set $key --org $ORG"
                    gh variable set "$key" --body "$value" --org "$ORG"
                else
                    log_info "GitHub CLI 명령어 실행: gh secret set $key --org $ORG"
                    gh secret set "$key" --body "$value" --org "$ORG"
                fi
            else
                log_warning "개인 계정에서는 조직 시크릿/변수를 설정할 수 없습니다: $key"
                return 1
            fi
            ;;
        "dependabot")
            log_info "GitHub CLI 명령어 실행: gh secret set $key --app dependabot --repo $REPO"
            gh secret set "$key" --body "$value" --app dependabot --repo "$REPO"
            ;;
        "codespaces")
            log_info "GitHub CLI 명령어 실행: gh secret set $key --user"
            if ! gh secret set "$key" --body "$value" --user 2>/dev/null; then
                log_error "Codespaces secret 설정 실패: GitHub CLI 인증 문제"
                log_warning "이는 GitHub CLI의 알려진 이슈입니다. 다음 방법들을 순서대로 시도해보세요:"
                echo ""
                log_info "1단계 (권장): 토큰 새로고침"
                log_info "  gh auth refresh -s codespace"
                echo ""
                log_info "2단계: 완전 재로그인"
                log_info "  gh auth logout"
                log_info "  gh auth login --scopes 'repo,user,workflow,codespace'"
                echo ""
                log_info "3단계: 수동 토큰 설정"
                log_info "  GitHub 웹에서 Personal Access Token 생성 (codespace 권한 포함)"
                log_info "  export GITHUB_TOKEN=your_token"
                echo ""
                log_info "해결 후 다시 실행해주세요."
                return 1
            fi
            ;;
        "env")
            local env_name=$(echo "$type_info" | cut -d: -f2)
            local env_storage_type=$(echo "$type_info" | cut -d: -f3)

            log_info "환경 처리: env_name=$env_name, storage_type=$env_storage_type"

            # 환경 존재 확인
            if ! check_environment_exists "$env_name"; then
                log_warning "환경 '$env_name'이 존재하지 않습니다"
                if create_environment "$env_name"; then
                    log_info "환경 생성 후 업로드를 계속합니다"
                else
                    log_error "환경 생성 실패로 업로드를 건너뜁니다: $key"
                    return 1
                fi
            fi

            if [ "$env_storage_type" = "variable" ]; then
                log_info "GitHub CLI 명령어 실행: gh variable set $key --env $env_name --repo $REPO"
                gh variable set "$key" --body "$value" --env "$env_name" --repo "$REPO"
            else
                log_info "GitHub CLI 명령어 실행: gh secret set $key --env $env_name --repo $REPO"
                gh secret set "$key" --body "$value" --env "$env_name" --repo "$REPO"
            fi
            ;;
        *)
            log_error "알 수 없는 시크릿 타입: $secret_type"
            return 1
            ;;
    esac
}

# .env 파일에서 환경변수 읽기 및 처리
process_env_file() {
    local filename="$1"
    local type_info="$2"
    local secrets_count=0
    local skipped_count=0
    local uploaded_count=0

    # 타입 정보에서 표시용 정보 추출
    local secret_type=$(echo "$type_info" | cut -d: -f1)
    local storage_type=$(echo "$type_info" | cut -d: -f2)

    log_info "$filename 파일 처리 중 (타입: $secret_type $storage_type)"

    # .env 파일을 한 줄씩 읽기 (POSIX 호환)
    while IFS= read -r line || [ -n "$line" ]; do
        # 빈 줄이나 주석 라인 건너뛰기 (POSIX 호환)
        case "$line" in
            ""|\#*|*[[:space:]]\#*)
                continue
                ;;
        esac

        # KEY=VALUE 형식 파싱 (POSIX 호환)
        case "$line" in
            [A-Za-z_]*=*)
                key=$(echo "$line" | cut -d= -f1)
                value=$(echo "$line" | cut -d= -f2-)

                # 따옴표 제거 (앞뒤 따옴표가 일치하는 경우)
                case "$value" in
                    \"*\")
                        value=$(echo "$value" | sed 's/^"\(.*\)"$/\1/')
                        ;;
                    \'*\')
                        value=$(echo "$value" | sed "s/^'\(.*\)'$/\1/")
                        ;;
                esac

                # 키 이름은 원본 그대로 사용 (대소문자 변환 안함)

                # 시크릿 이름 유효성 검사
                if ! validate_secret_name "$key"; then
                    log_warning "유효하지 않은 시크릿 이름 건너뛰기: $key"
                    skipped_count=$((skipped_count + 1))
                    continue
                fi

                # 빈 값 확인
                if [ -z "$value" ]; then
                    log_warning "빈 값인 시크릿 건너뛰기: $key"
                    skipped_count=$((skipped_count + 1))
                    continue
                fi

                secrets_count=$((secrets_count + 1))

                if [ "$storage_type" = "variable" ]; then
                    log_info "변수 업로드 중: $key"
                else
                    log_info "시크릿 업로드 중: $key"
                fi

                # GitHub 환경변수 업로드
                if upload_env_var "$key" "$value" "$type_info"; then
                    if [ "$storage_type" = "variable" ]; then
                        log_success "변수 업로드 완료: $key"
                    else
                        log_success "시크릿 업로드 완료: $key"
                    fi
                    uploaded_count=$((uploaded_count + 1))
                else
                    if [ "$storage_type" = "variable" ]; then
                        log_error "변수 업로드 실패: $key"
                    else
                        log_error "시크릿 업로드 실패: $key"
                    fi
                fi
                ;;
            *)
                log_warning "유효하지 않은 라인 형식 건너뛰기: $line"
                ;;
        esac
    done < "$filename"

    echo ""
    log_info "=== 처리 결과 요약 ==="
    log_info "총 처리된 환경변수: $secrets_count"
    log_info "건너뛴 환경변수: $skipped_count"
    log_info "성공적으로 업로드된 환경변수: $uploaded_count"

    if [ $uploaded_count -lt $secrets_count ]; then
        log_warning "일부 환경변수 업로드에 실패했습니다."
    fi
}

# 메인 함수
main() {
    # GitHub Actions 또는 CI 환경 체크를 맨 앞으로 이동
    # semantic-release 환경 포함한 모든 CI 환경 감지
    if [ "$CI" = "true" ] || [ "$GITHUB_ACTIONS" = "true" ] || [ -n "$RUNNER_OS" ] || [ -n "$GITHUB_WORKFLOW" ] || [ -n "$GITHUB_RUN_ID" ] || [ -n "$GITHUB_REF" ] || [ -n "$SEMANTIC_RELEASE" ]; then
        echo "CI 환경에서 시크릿 업로드를 건너뜁니다."
        exit 0
    fi

    log_info "GitHub 시크릿 자동 업로드 시작 (pre-push hook)"
    log_info "=================================================="

    # 사전 확인
    check_gh_cli
    check_gh_auth
    find_env_files
    get_current_repo

    # 각 .env 파일별 환경변수 처리
    for env_file in $ENV_FILES; do
        type_info=$(determine_secret_type "$env_file")

        # 타입 정보에서 조직 관련 체크
        local secret_type=$(echo "$type_info" | cut -d: -f1)

        # 예약어 충돌로 인한 invalid 파일 건너뛰기
        if [ "$secret_type" = "invalid" ]; then
            echo ""
            log_warning "$env_file 파일을 건너뜁니다 (예약어 충돌)"
            continue
        fi

        # .env.org 관련 파일이지만 개인 계정인 경우 건너뛰기
        if [ "$secret_type" = "org" ] && [ "$ACCOUNT_TYPE" != "Organization" ]; then
            echo ""
            log_warning "$env_file 파일이 감지되었지만 현재 계정은 개인 계정입니다"
            log_warning "조직 시크릿/변수는 조직 계정에서만 설정할 수 있어 건너뜁니다"
            continue
        fi

        echo ""
        process_env_file "$env_file" "$type_info"
    done

    echo ""
    log_success "시크릿 업로드 완료!"
    log_info "GitHub에서 확인: https://github.com/$REPO/settings/secrets/actions"

    # 계정 타입별 추가 안내
    if [ "$ACCOUNT_TYPE" = "Organization" ]; then
        log_info "조직 시크릿 확인: https://github.com/orgs/$ORG/settings/secrets/actions"
    fi
}

# 스크립트 실행
main "$@"